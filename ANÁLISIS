1a.
-Análisis del problema

-La empresa Informa2 necesita desarrollar un sistema de cerradura, denominado Cerradura X, 
que consta de varias estructuras de matrices alineadas. Cada estructura puede tener un tamaño variable y debe ser capaz de rotar. 
Para abrir la cerradura, se utiliza una regla de apertura K que especifica relaciones entre celdas de diferentes estructuras.
		
-Para plantear esta solución tenemos unos requisitos del sistema como la creación de las estructuras de datos, después poder rotar 
las estructuras según lo requerido y teniendo en cuenta sus 4 estados. Debemos también saber configurar estas cerraduras con diferentes 
combinaciones de estructuras alineadas, teniendo en cuenta sus posibles variaciones en cantidad y tamaño. Por otro lado la validación 
de las reglas de apertura, lo que llamamos como K, aquí tener muy presente las relaciones entre celdas adyacentes y diferentes estructuras. 
Y por último la generación de configuraciones de cerraduras, es decir, las matrices que deben ir alienadas para que un K especifico logre abrir esta cerradura. 
	
	
*Consideraciones adicionales 
-Eficiencia y rendimiento son críticos, especialmente al manipular grandes matrices.
-La modularidad y reutilización del código son importantes para facilitar el mantenimiento y la extensibilidad del sistema.
-Se debe proporcionar una interfaz clara y amigable para que los usuarios configuren y operen el algoritmo de manera sencilla 

1b. 
-Esquema donde describa las tareas que usted definió en el desarrollo de los algoritmos.

-Función para crear matrices de tamaño variable: Diseñar una función que pueda crear matrices de tamaño variable. 
  Esta función debe aceptar como parámetros el número de filas y columnas de la matriz y devolver la matriz creada.
	
-Función para redimensionar matrices: Desarrollar una función que permita redimensionar matrices existentes. 
  Esta función debe aceptar como parámetros la matriz a redimensionar, así como el nuevo número de filas y columnas. 
  Debe ser capaz de ajustar la matriz a la nueva dimensión, manteniendo los datos existentes si es posible.
	
-Función para realizar rotaciones: Implementar una función que pueda rotar una matriz en una dirección específica. 
  Esta función puede aceptar como parámetros la matriz a rotar y el estado de rotación (1,2,3). 
	
-Función para imprimir matrices: Crear una función que pueda imprimir matrices en la consola o en algún otro formato de salida. 
  Esta función debe aceptar la matriz como parámetro y mostrar sus elementos de manera legible.

//Analisis de conceptos fundamentales:
Estructura de datos M: Es una estructura que puede girar y cambiar de dimensiones. Puede verse como una matriz cuadrada de tamaño impar,
con un número igual de filas y columnas.

Cerradura X: Se forma al alinear varias estructuras M una tras otra, utilizando la celda central como referencia. No hay restricciones
en la cantidad de estructuras M que se pueden alinear, y sus tamaños pueden ser diferentes.

Sistema de apertura: La cerradura X se abre validando una regla K. Esta regla K especifica condiciones para las celdas en diferentes
estructuras alineadas. Por ejemplo, una regla K puede indicar que el valor de una celda en una estructura debe ser mayor que el valor
de la celda correspondiente en la siguiente estructura, y así sucesivamente.


Validación de la regla K: Para abrir la cerradura, se deben girar las estructuras de manera independiente para alinear las celdas 
de manera que la validación de la regla K sea verdadera. Esto implica ajustar la orientación de cada estructura para que las 
condiciones especificadas por la regla K se cumplan.


Para resumir, la cerradura X utiliza una estructura de datos flexible y un sistema de apertura basado en una regla K para proporcionar
seguridad. La capacidad de girar y cambiar de tamaño de las estructuras M permite una mayor flexibilidad en el diseño de la cerradura y 
en las condiciones de apertura.


*Funciones a implementar 
1. def crearMatriz()                       //manejo de matrices
Entradas:
Número de filas (filas)
Número de columnas (columnas)
Variables:
Puntero a un arreglo bidimensional (matriz)
Salida:
Puntero a la matriz creada (matriz)

2. def redimensionarMatriz()
Entradas:
Matriz a redimensionar (matriz)
Número de filas deseado (nuevasFilas)
Número de columnas deseado (nuevasColumnas)
Variables internas:
Nueva matriz redimensionada (nuevaMatriz)
Salida:
Matriz redimensionada (nuevaMatriz)

3. rotarMatriz
Entradas:
Matriz a rotar (matriz)
Estado de rotación (estado)
Variables:
Variables temporales para almacenar elementos durante la rotación
Salida:
Matriz rotada (matrizRotada)

4. imprimirMatriz()
Entradas:
Matriz a imprimir (matriz)
Variables:
Variables para iterar sobre filas y columnas de la matriz
Salida:


//Debemos implementar algo para el manejo de todas estas matrices, puede ser un arreglo de matrices, un arreglo de arreglos


5. validarClaveK()                  //verificación de claves
Entrada:
Clave K como cadena de caracteres (claveK)                  //verificar que k sean solo numeros empezando del 0 
Cantidad de matrices en la cerradura X (cantidadMatrices)
Salida:
Valor booleano que indica si la clave K es válida (true) o no (false)


6. verificarClaveK()                     //ver que k sea coherente con la cerradura que tenemos, por ejemplo longitud de las condiciones
Entrada:                                 //que las condiciones de los numeros a evaluar de k sean coherentes con el numero de matrices
Clave K como cadena de caracteres (claveK)  //que tenemos 
Salida:
Valor booleano que indica si el formato de la clave K es correcto (true) o no (false)


7. verificarFilas_Columnas               //verificar que la fila y columna a evaluar exista en cada una de las matrices de la cerradura
Entrada:
Arreglo de números de fila y columna extraídos de la clave K (numerosFilasColumnas)
Dimensiones de las matrices en la cerradura X (dimensionesMatrices)
Salida:
Valor booleano que indica si los números de fila y columna existen dentro de las matrices de la cerradura (true) o no (false)



8.  validarReglas()

1c. Algoritmos implementados:

Función para crear matrices de tamaño variable (crearMatriz): Esta función crea una matriz de tamaño variable con el número de filas 
y columnas especificado por el usuario. La matriz creada se inicializa con valores secuenciales.

Función para redimensionar matrices (redimensionarMatriz): Esta función redimensiona una matriz existente para que 
tenga el número de filas y columnas especificado. Se asegura de conservar los datos originales si es posible.

Función para realizar rotaciones (rotarMatriz): Esta función rota una matriz en una dirección específica, según el 
estado proporcionado (1, 2 o 3).

Función para imprimir matrices (imprimirMatriz): Esta función imprime una matriz en la consola de manera legible.

Función para hallar la dimensión mínima de la matriz con la entrada de filas y columnas

Funcion para crear una cerradura con la cantidad de matrices y sus dimensiones

Funcion para validar las condiciones, donde encontramos los valores correspondientes en cada matriz y hacemos la verificacion con la 
clave ingresada

1d. Problemas de desarrollo que afrontó:

Durante el desarrollo, uno de los principales problemas a los que nos enfrentamos fue 
garantizar que las operaciones de redimensionamiento y rotación de las matrices se realizaran correctamente. 
Tuvimos que prestar especial atención para asegurarnos de conservar los datos de manera apropiada y de que las operaciones 
fueran eficientes en términos de rendimiento.

Además, enfrentamos desafíos al manejar las validaciones de la clave K. Fue crucial asegurarnos de que el formato de la 
clave fuera correcto y coherente con la cantidad de matrices en la cerradura. También debimos verificar que las filas y columnas 
especificadas en la clave existieran dentro de las matrices, lo cual implicó un cuidadoso manejo de los índices y la verificación 
de la existencia de cada celda en las matrices correspondientes.

Por ultimo el problema mayor fue la evaluacion de las condiciones cuando esta era especificamente -1, tuvimos varios problemas con este -1
ya que este nos dañaba por ejemplo la cantidad de matrices a generar, y hacer su validacion como entrada fue algo bastante complicado. 

1e. Evolución de la solución y consideraciones para tener en cuenta en la implementación:

Durante la evolución de la solución, se realizaron varias iteraciones para optimizar el rendimiento y la eficiencia del código. 
Se prestaron especial atención a las operaciones que involucran la manipulación de matrices, como la redimensión y la rotación, 
para garantizar un funcionamiento óptimo.

También se borro todo y se volvio a empezar de 0 en varias ocasiones, para mejorar la claridad y modularidad del codigo

Para la implementación, es importante tener en cuenta la modularidad del código y la claridad de la interfaz de usuario. 
Se debe proporcionar una documentación detallada de las funciones y asegurarse de que el sistema sea fácil de entender y 
usar para los usuarios finales. Además, se debe realizar una exhaustiva prueba del sistema para garantizar su fiabilidad y corrección.

Tambien tener muy presente el manejo del -1 en la clave, ya que, como mencionamos anteriormente, este nos estaba dañando gran parte del
codigo porque no sabiamos bien como manejarlo.

Por ultimo, tener presente que el valor de referencia no es el mismo fila y columna ingresada en la clave para todas las matrices, 
sino que se aplica solo a la primera, y de aqui se debe hacer el ajuste de fila y columna para llegar al valor indicado teniendo como 
referencia el 0 del centro de cada matriz






